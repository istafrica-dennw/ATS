# Server Configuration
server.port=${SERVER_PORT:8080}

# Allow Bean Overriding
spring.main.allow-bean-definition-overriding=true

# Frontend Configuration
app.frontend.url=${FRONTEND_URL:http://localhost:3001}
app.frontend.cors.allowed-origins=*

# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.max-lifetime=1200000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true
spring.flyway.clean-on-validation-error=false
#spring.flyway.clean-on-migrate=true

# Security Configuration
spring.security.user.name=${SPRING_SECURITY_USER_NAME}
spring.security.user.password=${SPRING_SECURITY_USER_PASSWORD}
spring.security.user.roles=${SPRING_SECURITY_USER_ROLES}

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload-dir=uploads

# Logging Configuration
logging.level.root=INFO
logging.level.com.ats=DEBUG
logging.level.com.ats.controller=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.file.name=logs/ats-application.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.client=DEBUG
logging.level.org.springframework.security.oauth2.client.authentication=DEBUG
logging.level.org.springframework.security.oauth2.client.registration=DEBUG
logging.level.org.springframework.security.oauth2.client.web=DEBUG
logging.level.org.springframework.security.oauth2.core=DEBUG
logging.level.org.springframework.security.oauth2.core.oidc=DEBUG
logging.level.org.springframework.security.oauth2.jose=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Docker Health Check
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# Swagger Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.layout=BaseLayout
springdoc.swagger-ui.doc-expansion=none
springdoc.swagger-ui.default-models-expand-depth=0
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.show-extensions=true
springdoc.swagger-ui.persist-authorization=true
springdoc.default-support-form-data=true

# LinkedIn OAuth2 Configuration
spring.security.oauth2.client.registration.linkedin.client-id=${LINKEDIN_CLIENT_ID}
spring.security.oauth2.client.registration.linkedin.client-secret=${LINKEDIN_CLIENT_SECRET}
spring.security.oauth2.client.registration.linkedin.scope=openid,profile,email
spring.security.oauth2.client.registration.linkedin.redirect-uri=${BACKEND_URL:http://localhost:8080}/login/oauth2/code/linkedin
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.registration.linkedin.client-name=LinkedIn

# LinkedIn Provider Configuration
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/userinfo
spring.security.oauth2.client.provider.linkedin.user-name-attribute=sub
spring.security.oauth2.client.provider.linkedin.jwk-set-uri=https://www.linkedin.com/oauth/openid/jwks
spring.security.oauth2.client.provider.linkedin.authorization-uri-parameters.use-nonce=true
spring.security.oauth2.client.provider.linkedin.authorization-uri-parameters.response_type=code
spring.security.oauth2.client.provider.linkedin.authorization-uri-parameters.response_mode=query

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# Default Admin Configuration
app.admin.email=${ADMIN_EMAIL}
app.admin.password=${ADMIN_PASSWORD}

# AI Resume Analysis Configuration (Generic AI Service)
# Supports multiple providers: Ollama, OpenAI, Claude, etc.

# AI Service Configuration (configurable for any provider)
ai.service.provider=${AI_PROVIDER:ollama}
ai.service.base-url=${AI_BASE_URL:http://ollama:11434}
ai.service.model=${AI_MODEL:llama3}
ai.service.api-key=${AI_API_KEY:}
ai.service.auth-type=${AI_AUTH_TYPE:none}
ai.service.auth-header=${AI_AUTH_HEADER:Authorization}
ai.service.generation-endpoint=${AI_GENERATION_ENDPOINT:/api/generate}
ai.service.health-endpoint=${AI_HEALTH_ENDPOINT:/api/tags}
ai.service.request-format=${AI_REQUEST_FORMAT:ollama}
ai.service.response-field=${AI_RESPONSE_FIELD:response}
ai.service.max-tokens=${AI_MAX_TOKENS:1000}
ai.service.temperature=${AI_TEMPERATURE:0.1}
app.uploads.directory=${UPLOADS_DIRECTORY:uploads}

# Optional: OpenAI Configuration (for premium users)
openai.api.key=${OPENAI_API_KEY:}

# LangChain4j Configuration (only if using OpenAI)
langchain4j.open-ai.chat-model.api-key=${OPENAI_API_KEY:}
langchain4j.open-ai.chat-model.model-name=gpt-4
langchain4j.open-ai.chat-model.temperature=0.3
langchain4j.open-ai.chat-model.max-tokens=2000

# Socket.IO Configuration
socketio.host=${SOCKETIO_HOST:localhost}
socketio.port=${SOCKETIO_PORT:9092}
socketio.bossCount=${SOCKETIO_BOSS_COUNT:1}
socketio.workCount=${SOCKETIO_WORK_COUNT:100}
socketio.allowCustomRequests=${SOCKETIO_ALLOW_CUSTOM_REQUESTS:false}
socketio.upgradeTimeout=${SOCKETIO_UPGRADE_TIMEOUT:10000}
socketio.pingTimeout=${SOCKETIO_PING_TIMEOUT:60000}
socketio.pingInterval=${SOCKETIO_PING_INTERVAL:25000}