name: Deploy ATS to AWS EC2

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean
  
  # Trigger ONLY on pull request MERGE to main (not on regular push)
  pull_request:
    branches: [ main ]
    types: [closed]

env:
  DEPLOYMENT_PATH: /home/ubuntu/ats-system
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # Job 1: Run tests (optional)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    # Only run if PR was merged or manual trigger (and tests not skipped for manual triggers)
    if: ${{ (github.event.pull_request.merged == true) || (github.event_name == 'workflow_dispatch' && !inputs.skip_tests) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Install Make and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y make
          
          # Install Docker Compose
          COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
          sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
          # Verify installation
          docker-compose --version
          make --version
      
      - name: Verify Docker setup
        run: |
          docker --version
          docker info
          sudo systemctl start docker || true
          docker ps
      
      - name: Run test setup
        run: make test-setup
      
      - name: Wait for test database
        run: |
          echo "Waiting for test database to be ready..."
          timeout 60 bash -c 'until docker exec ats-postgres-test pg_isready -U ats_test_user -d ats_test; do sleep 2; done'
      
      - name: Run unit tests
        run: make test-unit
      
      - name: Generate coverage report
        run: make test-coverage-report
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/target/surefire-reports/
            coverage-report/
      
      - name: Cleanup test environment
        if: always()
        run: make test-cleanup

  # Job 2: Build and deploy
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: test
    # Only run if PR was merged or manual trigger
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch') && (always() && (needs.test.result == 'success' || needs.test.result == 'skipped')) }}
    
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials (for future use)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
      
      - name: Check EC2 instance resources
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo "=== EC2 Instance Information ==="
            echo "Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
            echo "Instance Type: $(curl -s http://169.254.169.254/latest/meta-data/instance-type)"
            echo "Public IP: $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
            echo "Available Memory: $(free -h | grep Mem | awk '{print $7}')"
            echo "Available Disk: $(df -h / | tail -1 | awk '{print $4}')"
            echo "Docker Status: $(systemctl is-active docker)"
            echo "==============================="
          EOF
      
      - name: Create deployment directory
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            sudo mkdir -p ${{ env.DEPLOYMENT_PATH }}
            sudo chown ubuntu:ubuntu ${{ env.DEPLOYMENT_PATH }}
          EOF
      
      - name: Stop existing application
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ env.DEPLOYMENT_PATH }}
            if [ -f docker-compose.aws.yml ]; then
              echo "Stopping existing application..."
              docker-compose -f docker-compose.aws.yml down || true
            fi
          EOF
      
      - name: Sync application files
        run: |
          # Use rsync to sync files efficiently
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='target' \
            --exclude='*.log' \
            --exclude='.env' \
            ./ ubuntu@${{ secrets.EC2_HOST }}:${{ env.DEPLOYMENT_PATH }}/
      
      - name: Create environment file
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ env.DEPLOYMENT_PATH }}
            
            # Create .env file with secrets
            echo "# Database Configuration" > .env
            echo "POSTGRES_DB=ats_db" >> .env
            echo "POSTGRES_USER=ats_user" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ats_db" >> .env
            echo "" >> .env
            echo "# Security Configuration" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "SPRING_SECURITY_USER_NAME=admin" >> .env
            echo "SPRING_SECURITY_USER_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "SPRING_SECURITY_USER_ROLES=ADMIN" >> .env
            echo "" >> .env
            echo "# Email Configuration" >> .env
            echo "MAIL_HOST=smtp.gmail.com" >> .env
            echo "MAIL_PORT=587" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "" >> .env
            echo "# OAuth Configuration" >> .env
            echo "LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID }}" >> .env
            echo "LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }}" >> .env
            echo "BACKEND_URL=http://${{ secrets.EC2_HOST }}:8080" >> .env
            echo "" >> .env
            echo "# Gemini AI Configuration" >> .env
            echo "AI_PROVIDER=gemini" >> .env
            echo "AI_BASE_URL=https://generativelanguage.googleapis.com" >> .env
            echo "AI_MODEL=gemini-1.5-flash" >> .env
            echo "AI_API_KEY=${{ secrets.AI_API_KEY }}" >> .env
            echo "AI_AUTH_TYPE=api-key" >> .env
            echo "AI_AUTH_HEADER=x-goog-api-key" >> .env
            echo "AI_REQUEST_FORMAT=gemini" >> .env
            echo "AI_GENERATION_ENDPOINT=/v1beta/models/gemini-1.5-flash:generateContent" >> .env
            echo "AI_HEALTH_ENDPOINT=/v1beta/models" >> .env
            echo "AI_RESPONSE_FIELD=candidates" >> .env
            echo "AI_MAX_TOKENS=1000" >> .env
            echo "AI_TEMPERATURE=0.1" >> .env
            echo "" >> .env
            echo "# Application Configuration" >> .env
            echo "REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:8080/api" >> .env
            echo "REACT_APP_SOCKET_URL=http://${{ secrets.EC2_HOST }}:9092" >> .env
            echo "FRONTEND_URL=http://${{ secrets.EC2_HOST }}" >> .env
            echo "BACKEND_URL=http://${{ secrets.EC2_HOST }}:8080" >> .env
            echo "UPLOADS_DIRECTORY=uploads" >> .env
            echo "" >> .env
            chmod 600 .env
            echo "Environment file created successfully"
          EOF
      
      - name: Install dependencies and deploy
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ env.DEPLOYMENT_PATH }}
            
            # Make deploy script executable
            chmod +x deploy-aws.sh
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update -y
              sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update -y
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d'"' -f4)
              sudo curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            echo "Docker and Docker Compose are ready"
          EOF
      
      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ env.DEPLOYMENT_PATH }}
            
            echo "Starting deployment..."
            
            # Clean up unused Docker resources
            docker system prune -f
            
            # Deploy with AWS-optimized configuration
            docker-compose -f docker-compose.aws.yml up -d --build
            
            echo "Deployment initiated. Waiting for services to be ready..."
            
            # Wait for services to be healthy
            timeout=300
            counter=0
            
            # Check PostgreSQL
            echo -n "Waiting for PostgreSQL: "
            while [ $counter -lt $timeout ]; do
              if docker exec ats-postgres-aws pg_isready -U ats_user -d ats_db 2>/dev/null; then
                echo " ✓"
                break
              fi
              echo -n "."
              sleep 5
              counter=$((counter + 5))
            done
            
            # Check Backend
            echo -n "Waiting for Backend: "
            counter=0
            while [ $counter -lt $timeout ]; do
              if curl -s http://localhost:8080/actuator/health > /dev/null; then
                echo " ✓"
                break
              fi
              echo -n "."
              sleep 5
              counter=$((counter + 5))
            done
            
            # Check Frontend
            echo -n "Waiting for Frontend: "
            counter=0
            while [ $counter -lt $timeout ]; do
              if curl -s http://localhost:80 > /dev/null; then
                echo " ✓"
                break
              fi
              echo -n "."
              sleep 5
              counter=$((counter + 5))
            done
            
            echo "All services are running!"
          EOF
      
      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ env.DEPLOYMENT_PATH }}
            
            echo "=== Deployment Verification ==="
            echo "Container Status:"
            docker-compose -f docker-compose.aws.yml ps
            
            echo ""
            echo "Memory Usage:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
            
            echo ""
            echo "Health Checks:"
            echo -n "Backend Health: "
            curl -s http://localhost:8080/actuator/health | jq -r '.status' 2>/dev/null || echo "UNKNOWN"
            
            echo -n "Frontend Status: "
            curl -s -o /dev/null -w "%{http_code}" http://localhost:80 || echo "UNKNOWN"
            
            echo ""
            echo "Application URLs:"
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "Frontend: http://$PUBLIC_IP:80"
            echo "Backend API: http://$PUBLIC_IP:8080"
            echo "API Documentation: http://$PUBLIC_IP:8080/swagger-ui.html"
            
            echo "==============================="
          EOF
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed. Check the logs above."
          fi
      
      - name: Post deployment summary
        if: success()
        run: |
          PUBLIC_IP=$(ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} "curl -s http://169.254.169.254/latest/meta-data/public-ipv4" 2>/dev/null || echo "Unknown")
          
          echo "🎉 **Deployment Summary**" >> $GITHUB_STEP_SUMMARY
          echo "=========================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Environment**: ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "🖥️  **Instance**: ${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: http://$PUBLIC_IP:80" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: http://$PUBLIC_IP:8080" >> $GITHUB_STEP_SUMMARY
          echo "- **API Documentation**: http://$PUBLIC_IP:8080/swagger-ui.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Management Commands:" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# SSH to instance" >> $GITHUB_STEP_SUMMARY
          echo "ssh -i your-key.pem ubuntu@${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View logs" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.aws.yml logs -f" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check status" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.aws.yml ps" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY 